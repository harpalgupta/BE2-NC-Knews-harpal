/
    ✓ GET returns a 404 for any non-existent route
    /api
      /topics
        ✓ GET responds with status 200 and an array of topics objects d
        ✓ POST responds with a 201 and the added topic d
        ✓ POST responds with a 422 bad request if sent a duplicate slug d 
        ✓ POST responds with a 400 if req.body is malformed (not null) d
        ✓ invalid methods respond with 405 d
      /topics/:topic/articles
        ✓ GET responds with a 200 and an array of 10 articles (default limit) d
        ✓ GET responds with a 404 with an invalid topic d
        ✓ GET sorts articles in desc order by date (default order) d
        ✓ GET takes a limit query which alters the number of articles returned d
        ✓ GET takes an p query which returns the next page of articles d
        ✓ GET takes sort_by query which alters the column by which data is sorted (desc order by default) p
        ✓ GET returns default response if given invalid sort_by d
        ✓ GET takes a sort_ascending query which changes the sort to ascending d
        ✓ GET returns all articles with a comment_count property d
        ✓ GET returns all articles with correct keys d
        ✓ GET returns a 400 bad request for malformed non-int limit/p queries d
        ✓ POST responds with a 201 and a newly added article for that topic d
        ✓ POST responds with a 400 if body is malformed (not null) d
        ✓ POST responds with a 404 when trying to add an article to a non-existent topic d
        ✓ invalid methods respond with 405 d
      /articles 
        ✓ GET responds with a 200 and an array of 10 articles (default limit)d
        ✓ GET sorts articles in desc order by date (default order)d
        ✓ GET takes a limit query which alters the number of articles returned d
        ✓ GET takes an p query which alters the starting index of the articles returned d
        ✓ GET takes sort_by query which alters the column by which data is sorted (desc order by default) d
        ✓ GET responds with default response if given invalid sort_by d
        ✓ GET takes a sort_ascending query which changes the sort to ascending d
        ✓ GET responds with all articles with a comment_count property d
        ✓ GET responds with all articles with correct keys d
        ✓ GET responds with a 400 bad request for malformed nonint limit/p queries d
        ✓ invalid methods respond with 405 d
      /articles/:article_id
        ✓ GET responds with a 200 and a single article d
        ✓ GET responds with a 404 when given a non-existent article_id d
        ✓ GET responds with a 400 when given an invalid article_id d
        ✓ PATCH responds with a 200 and an updated article when given a body including a valid "inc_votes" (VOTE UP) d
        ✓ PATCH responds with a 200 and an updated article when given a body including a valid "inc_votes" (VOTE DOWN)d
        ✓ PATCH responds with a 400 if given an invalid inc_votes d
        ✓ PATCH with no body responds with an unmodified article d
        ✓ DELETE responds with a 204 and removes the article when given a valid article_id d
        ✓ DELETE responds with a 404 when given a non-existent article_id d
        ✓ DELETE responds with 400 on invalid article_id d
        ✓ DELETE responds with a 204 when deleting an article without comments (no comments required to performdelete)
        ✓ invalid methods respond with 405 d
      /api/articles/:article_id/comments
        ✓ GET responds with status 200 and all the first 10 comments for the article (default limit) d
        ✓ GET takes a limit query which alters the number of comments returned d
        ✓ GET takes a p query which alters the page of the comments returned d
        ✓ GET sorts in descending order (default order) of date (default criterion) d
        ✓ GET can be sorted by author (desc order default) d
        ✓ GET can be sorted by votes (desc order default) d
        ✓ GET can return the data in ascending order d
        ✓ GET responds with 404 for a non-existent article_id d
        ✓ GET responds with 400 for an invalid article_id d
        ✓ POST responds with a 201 and the posted comment when given a valid article_id d
        ✓ POST responds with a 404 when given a non-existent article id d
        ✓ POST responds with a 400 when given an invalid article id d
        ✓ POST responds with a 400 when given an invalid body referencing a non-existent column d
        ✓ POST responds with a 400 when given a non-existent user_id d
        ✓ invalid methods respond with 405 d
      /articles/:article_id/comments/:comment_id
        ✓ PATCH responds with a 200 and an updated comment when given a body including a valid "inc_votes" (VOTE DOWN) d
        ✓ PATCH responds with a 400 if given an invalid inc_votes d
        ✓ PATCH with no body responds with an unmodified comment d
        ✓ PATCH responds with 404 if non-existent article id is used ???
        ✓ PATCH responds with 404 if non-existent comment id is used  d
        ✓ PATCH responds with a 404 if given a comment which does not exist on this /:article_id ??
        ✓ PATCH responds with 400 if invalid article id is used 
        ✓ PATCH responds with 400 if invalid comment id is used
        ✓ DELETE responds with a 204 and removes the comment
        ✓ DELETE responds with 404 if given a non-existent article_id
        ✓ DELETE responds with 404 if given a non-existent comment_id
        ✓ DELETE responds with 404 if given a comment which does not exist on this /:article_id
        ✓ invalid methods respond with 405
    /users
      ✓ GET responds with a 200 and an array of user objects
      ✓ invalid methods respond with 405
    /users/:user_id
      ✓ GET responds with a 200 and a user object when given a valid user_id
      ✓ GET responds with a 404 when a non-existent user_id
      ✓ GET responds with a 400 when given a malformed user_id
      ✓ invalid methods respond with 405